import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import re

st.set_page_config(page_title="Painel Financeiro", layout="wide")
st.title("ðŸ“Š Painel Financeiro")

st.markdown("FaÃ§a upload da sua planilha `.ods` ou `.xlsx` contendo os dados de gastos.")

# BotÃ£o para baixar planilha exemplo
with open("exemplo_planilha.xlsx", "rb") as file:
    btn = st.download_button(
        label="ðŸ“¥ Baixar planilha exemplo",
        data=file,
        file_name="exemplo_planilha.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

uploaded_file = st.file_uploader("Selecione sua planilha", type=["ods", "xlsx"])

if uploaded_file:
    try:
        # LÃª a planilha (ODS ou XLSX)
        df = pd.read_excel(
            uploaded_file,
            engine="odf" if uploaded_file.name.endswith(".ods") else "openpyxl"
        )

        # Limpa os espaÃ§os dos nomes das colunas
        df.columns = [col.strip() for col in df.columns]

        # Corrige o nome da coluna 'MÃªs ' para 'MÃªs'
        if 'MÃªs ' in df.columns:
            df.rename(columns={'MÃªs ': 'MÃªs'}, inplace=True)

        # Trata os valores como vÃ­rgula, R$ e ponto de milhar
def limpar_valor(valor):
    if isinstance(valor, str):
        valor = valor.replace('R$', '').strip()
        valor = re.sub(r'\.(?=\d{3}(,|$))', '', valor)  # remove ponto sÃ³ se for milhar
        valor = valor.replace(',', '.')  # vÃ­rgula decimal vira ponto
    try:
        return float(valor)
    except:
        return 0.0

# Aplica a limpeza na coluna de valores
df['Valor (R$)'] = df['Valor (R$)'].apply(limpar_valor)


# ðŸ†• Organiza os meses na ordem correta
ordem_meses = ['Janeiro', 'Fevereiro', 'MarÃ§o', 'Abril', 'Maio', 'Junho',
               'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']

df['MÃªs'] = pd.Categorical(df['MÃªs'], categories=ordem_meses, ordered=True)
df = df.sort_values('MÃªs')
# Filtros de MÃªs e DescriÃ§Ã£o
st.sidebar.header("ðŸ”Ž Filtros")

meses_unicos = df['MÃªs'].dropna().unique()
filtro_mes = st.sidebar.multiselect("Filtrar por mÃªs:", options=meses_unicos, default=meses_unicos)

categorias_unicas = df['DescriÃ§Ã£o'].dropna().unique()
filtro_categoria = st.sidebar.multiselect("Filtrar por categoria:", options=categorias_unicas, default=categorias_unicas)

# Aplica os filtros
df_filtrado = df[(df['MÃªs'].isin(filtro_mes)) & (df['DescriÃ§Ã£o'].isin(filtro_categoria))]

        df['Valor (R$)'] = df['Valor (R$)'].apply(limpar_valor)

        # Exibir a tabela
        st.subheader("ðŸ“‹ Tabela de Gastos")
        st.dataframe(df_filtrado)

        # Agrupar por mÃªs e mostrar grÃ¡fico
        st.subheader("ðŸ“… Gastos por MÃªs")
        gastos_mes = df_filtrado.groupby("MÃªs")['Valor (R$)'].sum().reset_index()
        st.bar_chart(gastos_mes.set_index("MÃªs"))

        # Mostrar total geral
        total = df_filtrado['Valor (R$)'].sum()
        total_formatado = f"R$ {total:,.2f}".replace(".", ",").replace(",", ".", 1)
        st.metric("ðŸ’° Total Geral de Gastos", total_formatado)

    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o arquivo: {e}")

else:
    st.info("FaÃ§a o upload de uma planilha para comeÃ§ar.")
